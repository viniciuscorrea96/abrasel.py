import pandas as pd
import streamlit as st
import plotly.express as px

st.set_page_config(page_title="An√°lise - Setor de Alimenta√ß√£o", layout="wide")

st.title("üìä An√°lise de Estabelecimentos no Setor de Alimenta√ß√£o")

# Pergunta 1: Quantas empresas ativas existem nesse segmento?
total_ativas = 12586
st.markdown(f"""
<div style='font-size: 22px; font-weight: bold; margin-bottom: 10px;'>Empresas Ativas no Setor de Alimenta√ß√£o</div>
<div style='font-size: 48px; color: #1f77b4; font-weight: bold;'>{total_ativas:,}</div>
""", unsafe_allow_html=True)

# Pergunta 2: Qual a distribui√ß√£o geogr√°fica (estados e cidades com maior concentra√ß√£o)?
empresas_por_uf = pd.DataFrame({
    'UF': ['SP', 'MG', 'RJ', 'BA', 'PR', 'RS', 'SC', 'PE', 'CE', 'PA'],
    'Qtd_Empresas': [2500, 1800, 1600, 1100, 950, 900, 850, 800, 700, 650]
})
st.subheader("üó∫Ô∏è Estados com mais Empresas Ativas")
fig_uf = px.bar(empresas_por_uf.sort_values("Qtd_Empresas"),
                x="Qtd_Empresas", y="UF", orientation="h",
                color="Qtd_Empresas", color_continuous_scale="Blues")
st.plotly_chart(fig_uf, use_container_width=True)

# Pergunta 3: Quais s√£o os CNAEs mais comuns e o que eles representam?
cnaes_mais_comuns = pd.DataFrame({
    'CNAE_Descricao': [
        "Lanchonetes", "Restaurantes", "Fornecimento domiciliar",
        "Bares com entretenimento", "Padarias e confeitarias", "Bares sem entretenimento"
    ],
    'Qtd_Empresas': [3753, 3333, 2951, 1083, 797, 669]
})
st.subheader("üçΩÔ∏è CNAEs mais Comuns no Setor")
fig_cnae = px.bar(cnaes_mais_comuns.sort_values("Qtd_Empresas"),
                  x="Qtd_Empresas", y="CNAE_Descricao", orientation="h",
                  color="Qtd_Empresas", color_continuous_scale="Blues")
st.plotly_chart(fig_cnae, use_container_width=True)

# Pergunta 4: Houve crescimento ou decl√≠nio no n√∫mero de empresas abertas no decorrer dos anos?
empresas_por_ano = pd.DataFrame({
    'Ano': list(range(2005, 2024)),
    'Qtd_Empresas': [50, 80, 120, 170, 200, 240, 310, 420, 510, 680, 740, 900, 1100, 1250, 1400, 1600, 1300, 1250, 1100]
})
st.subheader("üìà Evolu√ß√£o de Empresas Abertas por Ano")
fig_ano = px.line(empresas_por_ano, x='Ano', y='Qtd_Empresas', markers=True,
                  line_shape="linear", color_discrete_sequence=["#1f77b4"])
st.plotly_chart(fig_ano, use_container_width=True)

# Pergunta 5: Quais s√£o os principais motivos de empresas estarem "baixadas" ou "inativas"?
motivos_comuns = pd.DataFrame({
    'Motivo': [
        'OMISSAO DE DECLARACOES',
        'INAPTIDAO (LEI 11.941/2009 ART.54)',
        'REGISTRO CANCELADO',
        'OMISSAO CONTUMAZ',
        'EXTINCAO - TRATAMENTO DIFERENCIADO DADO AS ME',
        'OBITO DO MEI - TITULAR FALECIDO',
        'BAIXA DE PRODUTOR RURAL'
    ],
    'Qtd_Empresas': [135593, 51021, 23117, 10269, 5237, 4156, 2018]
})
st.subheader("üìâ Principais Motivos de Baixa ou Inatividade")
fig_motivos = px.bar(motivos_comuns.sort_values("Qtd_Empresas"),
                     x="Qtd_Empresas", y="Motivo", orientation="h",
                     color="Qtd_Empresas", color_continuous_scale="Blues")
st.plotly_chart(fig_motivos, use_container_width=True)

# Pergunta 6: Cidades com poucos estabelecimentos ativos
cidades_poucas = pd.DataFrame({
    'Munic√≠pio': [
        'IRACEMINHA', 'MONTIVIDIU', 'MATUPA', 'JUTI', 'ITAITINGA',
        'SAO SEBASTIAO DO UATUMA'
    ],
    'Qtd_Empresas': [1]*6
})
st.subheader("üèôÔ∏è Cidades com Menos Estabelecimentos Ativos")
st.dataframe(cidades_poucas, use_container_width=True)

# Pergunta 7: O que recomendar para manter os dados sempre atualizados?
st.subheader(" Recomenda√ß√µes para manter os dados sempre atualizados")
st.markdown("""
Para garantir que os dados utilizados na an√°lise estejam sempre atualizados, recomendo uma abordagem baseada em automa√ß√£o, qualidade e integra√ß√£o com fontes oficiais. Abaixo est√£o os principais pontos:

1. **Automatiza√ß√£o do pipeline de dados**
   - Criar scripts Python para realizar o download autom√°tico dos arquivos da Receita Federal e outras fontes.
   - Utilizar agendadores como `cron`, `Apache Airflow` ou `Prefect` para execu√ß√£o di√°ria/mensal.
   - Armazenar arquivos com controle de data para versionamento e auditoria.

2. **Valida√ß√£o e tratamento automatizado**
   - Validar campos obrigat√≥rios (como CNPJ, datas, CNAE).
   - Tratar campos nulos e aplicar preenchimento padr√£o onde necess√°rio.
   - Registrar falhas de carregamento em logs para diagn√≥stico r√°pido.

3. **Governan√ßa e padroniza√ß√£o**
   - Manter um dicion√°rio de dados (com defini√ß√£o dos campos, formatos e tipos).
   - Padronizar colunas sens√≠veis como CNAE, munic√≠pio e situa√ß√£o cadastral.
   - Controlar as vers√µes de bases com Git ou sistemas de versionamento.

4. **Armazenamento centralizado**
   - Usar data lakes ou bancos relacionais (ex: PostgreSQL, BigQuery) para guardar os dados processados.
   - Garantir backup autom√°tico dos arquivos brutos.

5. **Integra√ß√£o com dashboards**
   - Conectar os dados j√° tratados aos dashboards (como Power BI, Metabase ou Streamlit).
   - Garantir que os gr√°ficos se atualizem automaticamente a cada nova carga de dados.

 *Resumo final:*  
"A melhor maneira de manter os dados atualizados √© trat√°-los como um produto vivo. Com automa√ß√£o, valida√ß√µes e governan√ßa, suas an√°lises estar√£o sempre alinhadas com a realidade."
""")

# Rodap√©
st.info("Este dashboard foi gerado com base em dados p√∫blicos da Receita Federal e representa uma an√°lise explorat√≥ria do setor de alimenta√ß√£o no Brasil.")
